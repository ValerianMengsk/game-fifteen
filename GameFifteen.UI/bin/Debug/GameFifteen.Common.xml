<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameFifteen.Common</name>
    </assembly>
    <members>
        <member name="T:GameFifteenCommon.ScoreBoard">
            <summary>
            Class that deals with scores and ranking.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.ScoreBoard.scores">
            <summary>
            OrderedMultiDictionary that keeps scores of the players.
            </summary>
        </member>
        <member name="M:GameFifteenCommon.ScoreBoard.Scores">
            <summary>
            Makes string that represents the score board.
            </summary>
            <returns>Score board as string.</returns>
        </member>
        <member name="M:GameFifteenCommon.ScoreBoard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="P:GameFifteenCommon.ScoreBoard.Count"/> class.
            </summary>
        </member>
        <member name="M:GameFifteenCommon.ScoreBoard.Add(System.String,System.Int32)">
            <summary>
            Method that adds a user to the score board.
            </summary>
        </member>
        <member name="P:GameFifteenCommon.ScoreBoard.Count">
            <summary>
            Initializes the count field <see cref="!:count"/>
            </summary>
        </member>
        <member name="T:GameFifteenCommon.IRenderable">
            <summary>
            Interface, handling input and output.
            </summary>
        </member>
        <member name="M:GameFifteenCommon.IRenderable.Write(System.String)">
            <summary>
            Method, handling output.
            </summary>
            <param name="toDisplay">String to be displayed.</param>
        </member>
        <member name="M:GameFifteenCommon.IRenderable.Read(System.String)">
            <summary>
            Method handling input.
            </summary>
            <param name="message">Guide message the player.</param>
            <returns>String entered by player.</returns>
        </member>
        <member name="M:GameFifteenCommon.IRenderable.PrintField(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Method that prints the field in the UI
            </summary>
        </member>
        <member name="M:GameFifteenCommon.IRenderable.PrintScoreboard(Wintellect.PowerCollections.OrderedMultiDictionary{System.Int32,System.String})">
            <summary>
            Method that prints the scorebroard in th UI
            </summary>
        </member>
        <member name="M:GameFifteenCommon.IRenderable.StartupMessage">
            <summary>
            Method that shows the welcome message
            </summary>
        </member>
        <member name="T:GameFifteenCommon.GameEngine">
            <summary>
            Game manager that controls the game.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.GameEngine.DownBound">
            <summary>
            Constant for down bound of the field.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.GameEngine.UpBound">
            <summary>
            Constant for up bound of the field.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.GameEngine.Dimentions">
            <summary>
            Constant for the field dimentions.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.GameEngine.gameEngineInstance">
            <summary>
            Singleton eager initialization.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.GameEngine.gameField">
            <summary>
            Field that holds the gamefield.
            </summary>
        </member>
        <member name="M:GameFifteenCommon.GameEngine.#ctor(GameFifteenCommon.IRenderable)">
            <summary>
            Prevents a default instance of the <see cref="T:GameFifteenCommon.GameEngine"/> class from being created.
            Part of Singleton.
            Starts the game if there are no errors.
            </summary>
        </member>
        <member name="M:GameFifteenCommon.GameEngine.StartGame(GameFifteenCommon.IRenderable)">
            <summary>
            Method that gets the main instance of the game engine.
            </summary>
            <returns>The instance of the GameEngine.</returns>
        </member>
        <member name="M:GameFifteenCommon.GameEngine.StartNewGame(GameFifteenCommon.IRenderable,System.Boolean)">
            <summary>
            Method that starts the new game, when it was just loaded or restarted. 
            </summary>
        </member>
        <member name="M:GameFifteenCommon.GameEngine.CheckNeighbours(GameFifteenCommon.Coords,GameFifteenCommon.Coords)">
            <summary>
            Method that checks if the current cell can be moved to new position.
            </summary>
            <param name="currCell">Sell to be moved.</param>
            <param name="cellToBeMoveTo">New coordinates where the sell will be moved.</param>
            <returns>Retruns true if the operation is valid and false otherwise.</returns>
        </member>
        <member name="M:GameFifteenCommon.GameEngine.BeginGame(GameFifteenCommon.IRenderable)">
            <summary>
            Method that is responsible for communication between the user and the engine.
            Handles user input and outputs game response.
            </summary>
        </member>
        <member name="M:GameFifteenCommon.GameEngine.AddUserToScoreBoard(GameFifteenCommon.ScoreBoard,System.Int32,GameFifteenCommon.IRenderable)">
            <summary>
            Adds user to scoreboard, asking his name and getting his score.
            </summary>
            <param name="score">Number of moves.</param>
        </member>
        <member name="M:GameFifteenCommon.GameEngine.IsNumberMovable(System.String)">
            <summary>
            Validates the passed index.
            /// </summary>
            <param name="inputNumber">String inputNumber to be moved.</param>
            <returns>True if the number is movable and false otherwise.</returns>
        </member>
        <member name="M:GameFifteenCommon.GameEngine.MoveNumber(System.Int32)">
            <summary>
            This method moves a number from one position to another.
            </summary>
            <param name="index">Integer to use for moving a number.</param>
        </member>
        <member name="M:GameFifteenCommon.GameEngine.SwapCoords(System.Int32)">
            <summary>
            Method that swaps coordinates from given integer.
            </summary>
            <param name="index">Given integer.</param>
        </member>
        <member name="T:GameFifteenCommon.Coords">
            <summary>
            Class for defining the coordinates in the playfield.
            It contains rows, columns, field dimensions etc.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.Coords.dimensions">
            <summary>
            Field that holds number of dimensions as rows and cols.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.Coords.row">
            <summary>
            Field that represents rows.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.Coords.col">
            <summary>
            Field that represents columns.
            </summary>
        </member>
        <member name="M:GameFifteenCommon.Coords.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameFifteenCommon.Coords"/> class.
            Constructor that defines current coordinates by given row and column.
            </summary>
        </member>
        <member name="M:GameFifteenCommon.Coords.CheckIfIsInRange(System.Int32)">
            <summary>
            Checks the range, if it's out of range, throws an exception.
            </summary>
            <param name="dimension">Integer number that sets the up range.</param>
        </member>
        <member name="P:GameFifteenCommon.Coords.Row">
            <summary>
            Gets row and sets row, validating it.
            </summary>
            <value>Value for row.</value>
        </member>
        <member name="P:GameFifteenCommon.Coords.Col">
            <summary>
            Gets col, and sets col, validating it.
            </summary>
            <value>Property for col.</value>
        </member>
        <member name="T:GameFifteenCommon.Field">
            <summary>
            Class that represents the playfield.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.Field.dimensions">
            <summary>
            Readonly field, holding field dimensions.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.Field.field">
            <summary>
            Place to keep the playfield.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.Field.matrix">
            <summary>
            Field that keeps solved matrix.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.Field.numberCoords">
            <summary>
            Field that keeps a dictionary list for the numbers and their coordinates.
            </summary>
        </member>
        <member name="F:GameFifteenCommon.Field.numbers">
            <summary>
            Field that keeps matrix indeces
            </summary>
        </member>
        <member name="M:GameFifteenCommon.Field.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameFifteenCommon.Field"/> class.
            Constructor that initializes and fills the field with numbers.
            </summary>
        </member>
        <member name="M:GameFifteenCommon.Field.IsSolved">
            <summary>
            Check if the field is solved.
            </summary>
            <returns>Returns true or false.</returns>
        </member>
        <member name="M:GameFifteenCommon.Field.GetRandomField">
            <summary>
            Gets playfield filled with mixed numbers form 0 to 15.
            </summary>
        </member>
        <member name="M:GameFifteenCommon.Field.GenerateMatrixIndexNumbers">
            <summary>
            Generating list of numbers, representing matrix indexes
            </summary>
        </member>
        <member name="M:GameFifteenCommon.Field.GenerateSolvedMatrix">
            <summary>
            Generate solved matrix for specified dimensions.
            </summary>
        </member>
        <member name="M:GameFifteenCommon.Field.IsInRange(System.Int32)">
            <summary>
            Checks if integer number is in range of the field.
            </summary>
            <param name="dimension">Integer number to be checked.</param>
            <returns>Returns true if number is in range or false if it's not.</returns>
        </member>
        <member name="M:GameFifteenCommon.Field.ValidateDimensions(System.Int32,System.Int32)">
            <summary>
            Checks if row and column are in the range of the playfield.
            </summary>
        </member>
        <member name="P:GameFifteenCommon.Field.NumberCoords">
            <summary>
            Gets and sets field.
            </summary>
            <value>
            Gets and sets value for numbers coordinates.
            </value>
        </member>
        <member name="P:GameFifteenCommon.Field.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the class that set a sell be rows and columns.
            </summary>
            <param name="row">row index.</param>
            <param name="col">column index.</param>
            <returns>The value in the sell at current position in the field.</returns>
        </member>
    </members>
</doc>
